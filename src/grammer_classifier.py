# -*- coding: utf-8 -*-
"""BERT_SHL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLZ5tPsNTSkTSzBTzUcIubUPzoyeXJ52
"""

!pip install transformers

from google.colab import drive
drive.mount('/content/drive')

import torch
import re

# If there's a GPU available...
if torch.cuda.is_available():    

    # Tell PyTorch to use the GPU.    
    device = torch.device("cuda")

    print('There are %d GPU(s) available.' % torch.cuda.device_count())

    print('We will use the GPU:', torch.cuda.get_device_name(0))

# If not...
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

import pandas as pd
import matplotlib.pyplot as plt

#loading dataset
df_train = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/NLP Assignment/train_data.csv")
df_val=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/NLP Assignment/val_data.csv")

print(df_train.head())
print(df_val.head())

#Checking for Null Entries
print(df_train.info())
print(df_val.info())


# Number of positive and negative labels
print(df_train.labels.value_counts())
print(df_val.labels.value_counts())


# Get the lists of labels.
labels_train = df_train.labels.values
labels_val = df_val.labels.values

'''THIS FUNCTION REMOVES THE SPACES BETWEEN THE CONTRACTED WORDS AND REMOVING UNNECESSARY SPACES IN THE SENTENCES
            ca n't ==> can't 
            I 'm ===> I'm ...etc
'''
def remove_spaces(text):
    text = re.sub(r" '(\w)",r"'\1",text)
    text = re.sub(r" \,",",",text)
    text = re.sub(r" \.+",".",text)
    text = re.sub(r" \!+","!",text)
    text = re.sub(r" \?+","?",text)
    text = re.sub(" n't","n't",text)
    text = re.sub("[\(\)\;\_\^\`\/]","",text)
    
    return text


'''THIS FUNCTION DECONTRACTS THE CONTRACTED WORDS'''

def decontract(text):
    text = re.sub(r"won\'t", "will not", text)
    text = re.sub(r"can\'t", "can not", text)
    text = re.sub(r"n\'t", " not", text)
    text = re.sub(r"\'re", " are", text)
    text = re.sub(r"\'s", " is", text)
    text = re.sub(r"\'d", " would", text)
    text = re.sub(r"\'ll", " will", text)
    text = re.sub(r"\'t", " not", text)
    text = re.sub(r"\'ve", " have", text)
    text = re.sub(r"\'m", " am", text)
    return text


'''THIS FUNCTION PREPROCESSES THE TEXT '''
def preprocess(text):
    text = remove_spaces(text)   # REMOVING UNWANTED SPACES
    text = decontract(text)    # DECONTRACTION
    text = text.lower() ## CONVERTING TO LOWER CASE
    return text ## RETURNING THE PROCESSED TEXT

sentences_train=[]
for sentence in df_train.input:
  sentence = preprocess(sentence)
  sentences_train.append(sentence)


sentences_val=[]
for sentence in df_val.input:
  sentence = preprocess(sentence)
  sentences_val.append(sentence)

length=[]
for i in range(len(sentences_train)):
    l=len(sentences_train[i])
    length.append(l)
print(max(length))
print(sum(length) / len(length))

x=set(length)
y=[]
for i in x:
  y.append(length.count(i))

x=list(x)
# plotting
plt.xlabel('Length')
plt.ylabel('count')
plt.title('PDF')
plt.plot(x, y, marker='o')

from transformers import BertTokenizer

# Load the BERT tokenizer.
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)

# Process of tokenization
print(' Original: ', sentences_train[0])
print('Tokenized: ', tokenizer.tokenize(sentences_train[0]))
print('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences_train[0])))

# Tokenize all of the sentences and map the tokens to thier word IDs for training.
input_ids_train = []
attention_masks_train = []

for sentence in sentences_train:
    # `encode_plus` will:
    #   (1) Tokenize the sentence.
    #   (2) Prepend the `[CLS]` token to the start.
    #   (3) Append the `[SEP]` token to the end.
    #   (4) Map tokens to their IDs.
    #   (5) Pad or truncate the sentence to `max_length`
    #   (6) Create attention masks for [PAD] tokens.

    encoded_dict = tokenizer.encode_plus(
                        sentence,                      
                        add_special_tokens = True, 
                        max_length = 350,           
                        pad_to_max_length = True,
                        return_attention_mask = True,   
                        return_tensors = 'pt',    
                   )
    
    # Adding encoding of sentence to the list.    
    input_ids_train.append(encoded_dict['input_ids'])
    
    # And its attention mask (simply differentiates padding from non-padding).
    attention_masks_train.append(encoded_dict['attention_mask'])

# Converting into tensors.
input_ids_train = torch.cat(input_ids_train, dim=0)
attention_masks_train = torch.cat(attention_masks_train, dim=0)
labels_train = torch.tensor(labels_train)

# Print sample sentence 
print('Original: ', sentences_train[0])
print('Token IDs:', input_ids_train[0])
print('Token attention_masks: ', attention_masks_train[0])


# Tokenize all of the sentences and map the tokens to thier word IDs for validation.
input_ids_val = []
attention_masks_val = []

for sentence in sentences_val:

    encoded_dict = tokenizer.encode_plus(
                        sentence,                      
                        add_special_tokens = True, 
                        max_length = 350,           
                        pad_to_max_length = True,
                        return_attention_mask = True,   
                        return_tensors = 'pt',    
                   )
    
    input_ids_val.append(encoded_dict['input_ids'])
    
    attention_masks_val.append(encoded_dict['attention_mask'])

input_ids_val = torch.cat(input_ids_val, dim=0)
attention_masks_val = torch.cat(attention_masks_val, dim=0)
labels_val = torch.tensor(labels_val)

from torch.utils.data import TensorDataset

# Combine the training and validation inputs into a TensorDataset.
train_dataset = TensorDataset(input_ids_train, attention_masks_train, labels_train)
val_dataset = TensorDataset(input_ids_val, attention_masks_val, labels_val)

from torch.utils.data import DataLoader, RandomSampler, SequentialSampler

# batch size of 16 or 32 (the authors recommend). 
batch_size = 32

# Create the DataLoaders for our training and validation sets.
train_dataloader = DataLoader(
            train_dataset,  # The training samples.
            sampler = RandomSampler(train_dataset), # Select batches randomly
            batch_size = batch_size # Trains with this batch size.
        )

validation_dataloader = DataLoader(
            val_dataset, # The validation samples.
            sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.
            batch_size = batch_size # Evaluate with this batch size.
        )

from transformers import BertForSequenceClassification, AdamW, BertConfig

# Load BertForSequenceClassification, the pretrained BERT model with a single linear classification layer on top. 
model = BertForSequenceClassification.from_pretrained(
    "bert-base-uncased", # Use the 12-layer BERT model, with an uncased vocab.
    num_labels = 2, # The number of output labels--2 for binary classification.   
    output_attentions = False, # Whether the model returns attentions weights.
    output_hidden_states = False, # Whether the model returns all hidden-states.
)

# To run this model on the GPU.
model.cuda()

# Get all of the model's parameters as a list of tuples.
params = list(model.named_parameters())

print('The BERT model has {:} different named parameters.\n'.format(len(params)))

print('==== Embedding Layer ====\n')

for p in params[0:5]:
    print("{:<55} {:>12}".format(p[0], str(tuple(p[1].size()))))

print('\n==== First Transformer ====\n')

for p in params[5:21]:
    print("{:<55} {:>12}".format(p[0], str(tuple(p[1].size()))))

print('\n==== Output Layer ====\n')

for p in params[-4:]:
    print("{:<55} {:>12}".format(p[0], str(tuple(p[1].size()))))

# AdamW is a class from the huggingface library 
optimizer = AdamW(model.parameters(),
                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5
                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.
                )

from transformers import get_linear_schedule_with_warmup

# Number of training epochs. The BERT authors recommend between 2 and 4. 
# But for this task model starts to overfit after epoch 1 so we keep it as 1
epochs = 1

# Total number of training steps is [number of batches] x [number of epochs]. 
total_steps = len(train_dataloader) * epochs

# Create the learning rate scheduler.
scheduler = get_linear_schedule_with_warmup(optimizer, 
                                            num_warmup_steps = 0, # Default value in run_glue.py
                                            num_training_steps = total_steps)

import numpy as np

# Function to calculate the accuracy of our predictions vs labels
def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

import time
import datetime

def format_time(elapsed):
    '''
    Takes a time in seconds and returns a string hh:mm:ss
    '''
    # Round to the nearest second.
    elapsed_rounded = int(round((elapsed)))
    
    # Format as hh:mm:ss
    return str(datetime.timedelta(seconds=elapsed_rounded))

import random
import numpy as np

# This training code is based on the `run_glue.py` script here:
# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128

# Set the seed value all over the place to make this reproducible.
seed_val = 123

random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)

# We'll store a number of quantities such as training and validation loss, 
# validation accuracy, and timings.
training_stats = []

# Measure the total training time for the whole run.
total_t0 = time.time()

print('Training............................')

# For each epoch...
for epoch_i in range(0, epochs):
    
    #Training
    print("")
    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))
    

    # Measure how long the training epoch takes.
    t0 = time.time()

    # Reset the total loss for this epoch.
    total_train_loss = 0

    # Put the model into training mode. 
    model.train()

    # For each batch of training data...
    for step, batch in enumerate(train_dataloader):

        # Progress update every 50 batches.
        if step % 50 == 0 and not step == 0:
            # Calculate elapsed time in minutes.
            elapsed = format_time(time.time() - t0)
            
            # Report progress.
            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))

        # Unpack this training batch from our dataloader. 
        # `batch` contains three pytorch tensors:
        #   [0]: input ids 
        #   [1]: attention masks
        #   [2]: labels 
        b_input_ids = batch[0].to(device)
        b_input_mask = batch[1].to(device)
        b_labels = batch[2].to(device)

        # Always clear any previously calculated gradients before performing a backward pass.
        model.zero_grad()        

        # Perform a forward pass (evaluate the model on this training batch).
        outputs = model(b_input_ids, 
                             token_type_ids=None, 
                             attention_mask=b_input_mask, 
                             labels=b_labels)

        # Accumulate the training loss over all of the batches so that we can calculate the average loss at the end.
        loss = outputs.loss
        total_train_loss += loss

        # Perform a backward pass to calculate the gradients.
        loss.backward()

        # Clip the norm of the gradients to 1.0.(This is to help prevent the "exploding gradients" problem.)
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

        # Update parameters and take a step using the computed gradient.
        optimizer.step()

        # Update the learning rate.
        scheduler.step()

    # Calculate the average loss over all of the batches.
    avg_train_loss = total_train_loss / len(train_dataloader)            
    
    # Measure how long this epoch took.
    training_time = format_time(time.time() - t0)

    print("")
    print("  Average training loss: {0:.2f}".format(avg_train_loss))
    print("  Training epcoh took: {:}".format(training_time))
        

    # measure our performance on our validation set.

    print("")
    print("Running Validation...")

    t0 = time.time()

    # Put the model in evaluation model 
    model.eval()

    # Tracking variables 
    total_eval_accuracy = 0
    total_eval_loss = 0
    nb_eval_steps = 0

    # Evaluate data for one epoch
    for batch in validation_dataloader:
        
        # Unpack this training batch from our dataloader. 
        # `batch` contains three pytorch tensors:
        #   [0]: input ids 
        #   [1]: attention masks
        #   [2]: labels 
        b_input_ids = batch[0].to(device)
        b_input_mask = batch[1].to(device)
        b_labels = batch[2].to(device)
        
        # Tell pytorch not to bother with constructing the compute graph during
        # the forward pass, since this is validation (not training)
        with torch.no_grad():        

            # Forward pass, calculate logit predictions.
            # The "logits" are the output
            # values prior to applying an activation function like the softmax.
            outputs = model(b_input_ids, 
                                   token_type_ids=None, 
                                   attention_mask=b_input_mask,
                                   labels=b_labels)
            
        # Accumulate the validation loss.
        loss = outputs.loss
        logits = outputs.logits
        total_eval_loss += loss.item()

        # Move logits and labels to CPU
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()

        # Calculate the accuracy for this batch of test sentences, and
        # accumulate it over all batches.
        total_eval_accuracy += flat_accuracy(logits, label_ids)
        

    # Report the final accuracy for this validation run.
    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader)
    print("  Accuracy: {0:.2f}".format(avg_val_accuracy))

    # Calculate the average loss over all of the batches.
    avg_val_loss = total_eval_loss / len(validation_dataloader)
    
    # Measure how long the validation run took.
    validation_time = format_time(time.time() - t0)
    
    print("  Validation Loss: {0:.2f}".format(avg_val_loss))
    print("  Validation took: {:}".format(validation_time))

    # Record all statistics from this epoch.
    training_stats.append(
        {
            'epoch': epoch_i + 1,
            'Training Loss': avg_train_loss,
            'Valid. Loss': avg_val_loss,
            'Valid. Accur.': avg_val_accuracy,
            'Training Time': training_time,
            'Validation Time': validation_time
        }
    )

print("")
print("Training complete!")

print("Total training took {:} (h:mm:ss)".format(format_time(time.time()-total_t0)))

import pandas as pd

# Display floats with two decimal places.
pd.set_option('precision', 2)

# Create a DataFrame from our training statistics.
df_stats = pd.DataFrame(data=training_stats)

# Use the 'epoch' as the row index.
df_stats = df_stats.set_index('epoch')

# A hack to force the column headers to wrap.
#df = df.style.set_table_styles([dict(selector="th",props=[('max-width', '70px')])])

# Display the table.
df_stats

"""# Validation"""

validation_dataloader = DataLoader(
        val_dataset, # The validation samples.
        sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.
        batch_size = 1 # Evaluate with this batch size.
    )

logits_arr=[]
label_ids_arr=[]

model.eval()

for batch in validation_dataloader:

  b_input_ids = batch[0].to(device)
  b_input_mask = batch[1].to(device)
  b_labels = batch[2].to(device)

  # Tell pytorch not to bother with constructing the compute graph during
  # the forward pass, since this is validation (not training)
  with torch.no_grad():        

      # Forward pass, calculate logit predictions.
      # The "logits" are the output
      # values prior to applying an activation function like the softmax.
      outputs = model(b_input_ids, 
                      token_type_ids=None, 
                      attention_mask=b_input_mask
                      )
      
  # Accumulate the validation loss.
  loss = outputs.loss
  logits = outputs.logits

  # Move logits and labels to CPU
  logits_arr.append(logits.detach().cpu().numpy())
  label_ids_arr.append(b_labels.to('cpu').numpy())

# Creating lists of prediction and true label
pred_labels=[]
labels=[]
for i in range(len(logits_arr)):
  pred_labels.append(np.argmax(logits_arr[i], axis=1)[0])
  labels.append(label_ids_arr[i][0])

# Metrics Evaluation
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score

cm = confusion_matrix(labels, pred_labels)
print(cm)
print("accuracy_score: ",accuracy_score(labels, pred_labels))
print("precision_score: ",precision_score(labels, pred_labels))
print("recall_score: ",recall_score(labels, pred_labels))
print("f1_score: ",f1_score(labels, pred_labels))

# Analysis of tokens
sentence = "There are many laptopps around"
print(' Original: ', sentence)
print('Tokenized: ', tokenizer.tokenize(sentence))
print('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentence)))

"""#Testing"""

df_test=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/NLP Assignment/test_data.csv")

#Checking for Null Entries
print(df_test.info())


sentences_test=[]
for sentence in df_test.input:
  sentence = preprocess(sentence)
  sentences_test.append(sentence)

# Tokenize all of the sentences and map the tokens to thier word IDs for training.
input_ids_test = []
attention_masks_test = []

for sentence in sentences_test:
    # `encode_plus` will:
    #   (1) Tokenize the sentence.
    #   (2) Prepend the `[CLS]` token to the start.
    #   (3) Append the `[SEP]` token to the end.
    #   (4) Map tokens to their IDs.
    #   (5) Pad or truncate the sentence to `max_length`
    #   (6) Create attention masks for [PAD] tokens.

    encoded_dict = tokenizer.encode_plus(
                        sentence,                      
                        add_special_tokens = True, 
                        max_length = 350,           
                        pad_to_max_length = True,
                        return_attention_mask = True,   
                        return_tensors = 'pt',    
                   )
    
    # Adding encoding of sentence to the list.    
    input_ids_test.append(encoded_dict['input_ids'])
    
    # And its attention mask (simply differentiates padding from non-padding).
    attention_masks_test.append(encoded_dict['attention_mask'])

# Converting into tensors.
input_ids_test = torch.cat(input_ids_test, dim=0)
attention_masks_test = torch.cat(attention_masks_test, dim=0)

# Print sample sentence 
print('Original: ', sentences_test[0])
print('Token IDs:', input_ids_test[0])
print('Token attention_masks: ', attention_masks_test[0])

# Combine the training and validation inputs into a TensorDataset.
test_dataset = TensorDataset(input_ids_test, attention_masks_test)

test_dataloader = DataLoader(
        test_dataset, # The validation samples.
        sampler = SequentialSampler(test_dataset), # Pull out batches sequentially.
        batch_size = 1 # Evaluate with this batch size.
    )

logits_arr=[]
label_ids_arr=[]

model.eval()

for batch in test_dataloader:

  b_input_ids = batch[0].to(device)
  b_input_mask = batch[1].to(device)

  # Tell pytorch not to bother with constructing the compute graph during
  # the forward pass, since this is validation (not training)
  with torch.no_grad():        

      # Forward pass, calculate logit predictions.
      # The "logits" are the output
      # values prior to applying an activation function like the softmax.
      outputs = model(b_input_ids, 
                      token_type_ids=None, 
                      attention_mask=b_input_mask
                      )
      
  # Accumulate the validation loss.
  loss = outputs.loss
  logits = outputs.logits

  # Move logits and labels to CPU
  logits_arr.append(logits.detach().cpu().numpy())

# Creating lists of prediction and true label
test_labels=[]
for i in range(len(logits_arr)):
  test_labels.append(np.argmax(logits_arr[i], axis=1)[0])

df_test['labels'] = test_labels
df_test.head()

df_test.to_csv("shivshankar_shukla_submission.csv")